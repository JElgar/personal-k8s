- name: Install required software
  hosts: localhost
  tasks:
  - name: install snap
    apt: 
      name: 
        - snapd
  - name: install hcloud
    snap: 
      name: hcloud
      channel: latest/edge
    become: true
  - name: install hcloud-python 
    pip: 
      name: hcloud


- name: Setup hetzner network and master node 
  vars:
    networkid: k8s-network 
    masterid: k8s-master 
    sshkey: jelgar@UbuntuPC
    inventorygroup: devmicrok8s 
    masterinventorygroup: devmicrok8smaster
    hcloud_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
  hosts: localhost
  tasks:
  - name: Create a basic network
    hcloud_network:
      api_token: "{{ hcloud_token }}"
      name: "{{ networkid }}"
      ip_range: 10.0.0.0/16
      state: present
  - name: Create a basic subnetwork
    hcloud_subnetwork:
      api_token: "{{ hcloud_token }}"
      network: "{{ networkid }}"
      ip_range: 10.0.0.0/24
      network_zone: eu-central
      type: server
      state: present

  - name: Create a master server with ssh key
    hcloud_server:
      api_token: "{{ hcloud_token }}"
      name: "{{ masterid }}"
      server_type: cx11
      image: ubuntu-20.04
      location: nbg1
      ssh_keys:
        - "{{ sshkey }}"
      state: present
    register: server

  - name: Add master node to network 
    hcloud_server_network:
      network: "{{ networkid }}"
      server: "{{ masterid }}"
      state: present

  - name: Add server to inventory group
    add_host:
      hostname: '{{ server.hcloud_server.ipv4_address }}'
      ansible_ssh_user: root
      groups:
      - "{{ inventorygroup }}"
      - "{{ masterinventorygroup }}"

  - name: Creating local SSH config files
    template:
      src: templates/single_ssh_config_template.j2
      dest: ~/.ssh/ansible/microk8s.conf
      mode: 0644


- name: Install required software
  hosts: devmicrok8s 
  tasks:
  - name: Update apt-get repo and cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

  - name: Upgrade all apt packages
    apt: upgrade=dist force_apt_get=yes

  - name: install snap
    apt: 
      name: 
        - snapd
  
  - name: install pip 
    apt: 
      name: 
        - python3-pip 
          
  - name: Install openshift 
    pip:
      name: openshift 

  - name: install microk8s 
    snap: 
      name: microk8s
      classic: yes
  
  - name: install kubectl 
    snap: 
      name: kubectl
      classic: yes

  - name: create .kube directory
    file:
      path: ~/.kube
      state: directory
  
  - name: export microk8s kubectl config
    shell: microk8s config > ~/.kube/config 

  - name: enable microk8s dns storage ingress dashboard
    shell: microk8s.enable dns storage ingress dashboard helm


- name: Install metalb 
  hosts: devmicrok8smaster
  tasks:
  
  - name: Install metallb 1
    command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml 

  - name: Install metallb 2
    command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml
  
  - name: Install metallb 3
    command: kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)" 


- name: Install metalb 
  hosts: devmicrok8smaster
  tasks:
  
  - name: Install 
    shell: microk8s.kubectl apply -f /tmp/simple-ingress.yaml


- name: Run microk8s service
  hosts: devmicrok8smaster
  tasks:
  - name: copy over k8s basic web app yml
    copy:
      src: configs/sample-ingress.yml
      dest: /tmp/sample-ingress.yml
      mode: '0644'

  - name: create basic web app 
    shell: microk8s.kubectl run web --image=gcr.io/google-samples/hello-app:1.0 --port=8080 
  
  - name: expose basic web app 
    shell: microk8s.kubectl expose deployment web --target-port=8080 --type=NodePort
  
  - name: apply ingress  controller
    shell: microk8s.kubectl apply -f /tmp/simple-ingress.yaml
  
